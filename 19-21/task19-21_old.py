# Универсальное решение через рекурсивный обход дерева ходов

"""
Условие

Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча
камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может
добавить в кучу один или три камня или увеличить количество камней в куче в
четыре раза. Чтобы делать ходы, у каждого игрока есть неограниченное количество
камней. Игра завершается, когда количество камней в куче становится не менее
111. Победителем считается игрок, сделавший последний ход, то есть первым
получивший кучу, в которой будет 111 или больше камней. В начальный момент в
куче было S камней, 1 ≤ S ≤ 110. Ответьте на следующие вопросы:

Вопрос 1. Найдите такое значение S, при котором Петя не может выиграть за один
ход, но Ваня выигрывает своим первым ходом после любого хода Пети.

Вопрос 2. Найдите два наименьших значения S, когда Петя имеет выигрышную
стратегию, причём одновременно выполняются два условия:

- Петя не может выиграть за один ход;

- Петя может выиграть своим вторым ходом независимо от того, как будет ходить
  Ваня.

Найденные значения запишите в ответе в порядке возрастания.

Вопрос 3. Найдите наименьшее значение S, при котором одновременно выполняются
два условия:

- у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым
  ходом при любой игре Пети;
- у Вани нет стратегии, которая позволит ему гарантированно выиграть первым
  ходом. 
"""


# Проверка того, что игровая позиция выигрышная
# (соблюдён критерий победы)
def is_winning(position):
    return position >= 111


# Создание списка всех возможных последующих позиций из данной
def get_next_positions(position):
    return [position + 1, position + 3, position * 4]


# Рекурсивный анализ партии
# Результат:
# N > 0 - исходная позиция имеет победную стратегию за максимум N ходов
# N < 0 - исходная позиция в любом случае приводит к поражению за максимум N ходов
# N == 0 - анализ не завершился из-за ограничения глубины рекурсии
# Предполагается, что для исходной позиции условие победы ещё не выполнено.
def analyze(position, depth=0, maxdepth=10):
    if depth > maxdepth:
        return 0
    next_positions = get_next_positions(position)
    # Проверка наличия возможности победить за один ход
    if any(is_winning(pos) for pos in next_positions):
        return 1
    # Запуск рекурсии
    results = [analyze(pos, depth + 1, maxdepth) for pos in next_positions]
    only_negative = [res for res in results if res < 0]
    if len(only_negative) > 0:
        # Ура, есть победная стратегия, а то и не одна!
        # Выбираем тот путь, где противник проигрывает быстрее всего,
        # и добавляем 1, чтобы учесть свой ход
        return max(only_negative) * -1 + 1
    only_positive = [res for res in results if res > 0]
    if len(only_positive) == len(results):
        # Все ходы противника приводят его к победе, значит, мы проигрываем
        # Выбираем тот путь, где противник выигрывает дольше всего.
        # Свой ход добавлять не надо.
        return max(only_positive) * -1
    # Если дошли досюда, значит, нет победной стратегии, но не все результаты анализа
    # положительные. Следовательно, где-то затесался 0, который обозначает ограничение
    # глубины рекурсии.
    return 0


print("Задание 19")
for s in range(1, 111):
    if analyze(s) == -1:
        print(s)
        break

print("Задание 20")
for s in range(1, 111):
    if analyze(s) == 2:
        print(s)

print("Задание 21")
for s in range(1, 111):
    if analyze(s) == -2:
        print(s)
        break
